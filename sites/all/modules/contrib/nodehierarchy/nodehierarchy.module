<?php
// $Id: nodehierarchy.module,v 1.12.2.4 2009/10/31 19:35:01 ronan Exp $

/**
 * @file
 *
 * A module to make nodes heirarchical.
 */

/**
 * Implementation of hook_init().
 */
function nodehierarchy_init() {
  // Ensure we are not serving a cached page.
  if (function_exists('drupal_set_content')) {
    if (module_exists('token')) {
      include_once './'. drupal_get_path('module', 'nodehierarchy') .'/includes/nodehierarchy_token.inc';
    }
    if (module_exists('workflow_ng')) {
      include_once './'. drupal_get_path('module', 'nodehierarchy') .'/includes/nodehierarchy_workflow_ng.inc';
    }
  }
}


/**
 * Implmentation of hook_views_api().
 */
function nodehierarchy_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'nodehierarchy') .'/includes/views',
  );
}

/**
 * Implementation of hook_simpletest().
 */
function nodehierarchy_simpletest() {
  $dir = drupal_get_path('module', 'nodehierarchy') .'/tests';
  $tests = file_scan_directory($dir, '\.test$');
  return array_keys($tests);
}

/**
 * Implementation of hook_help().
 */
function nodehierarchy_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('A module to make nodes heirarchical.');
  }
}

/**
 * Implementation of hook_perm().
 */
function nodehierarchy_perm() {
  return array('create child nodes', 'edit all node parents', 'edit own node parents', 'reorder children', 'view site outline', 'administer hierarchy', 'customize nodehierarchy menus');
}

/**
 * Implementation of hook_menu().
 */
function nodehierarchy_menu() {
  $items = array();
  $items['admin/settings/nodehierarchy'] = array(
    'title' => t('Node Hierarchy'),
    'description' => t('Administer default Node Hierarchy settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nodehierarchy_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['node/%node/children'] = array(
    'title' => t('Children'),
    'page callback' => 'nodehierarchy_view_children',
    'page arguments' => array(1),
    'access callback' => 'nodehierarchy_children_tab_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function nodehierarchy_menu_alter(&$items) {
  // Override the menu overview form to handle the potentially large number of links created by node hierarchy.
  $items['admin/build/menu-customize/%menu']['page arguments'] = array('nodehierarchy_menu_overview_form', 3);
}

/**
 * Children tab access callback.
 */
function nodehierarchy_children_tab_access($node) {
  return node_access('update', $node) && nodehierarchy_node_can_be_parent($node);
}

/**
 * Implementation of hook_theme().
 */
function nodehierarchy_theme() {
  return array(
    'nodehierarchy_new_child_links' => array(
      'arguments' => array('node' => NULL),
    ),
    'nodehierarchy_children_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'nodehierarchy_parent_selector' => array(
      'arguments' => array('form' => NULL),
    ),
    'nodehierarchy_menu_overview_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Helper function generates admin settings page.
 */
function nodehierarchy_admin_settings() {
  $form = array();

  // Individual type settings.
  $form['nodehierarchy_types'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node Type Settings'),
    '#description' => t('Settings for individual node types. These can also be set in the !ct section.', array("!ct" => l(t("Content Types"), "admin/content/types")))
  );
  foreach (node_get_types() as $key => $type) {
    // Individual type settings.
    $form['nodehierarchy_types'][$key] = array(
      '#type' => 'fieldset',
      '#title' => $type->name,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['nodehierarchy_types'][$key] += _nodehierarchy_get_node_type_settings_form($key, TRUE);
  }

  // Menu generation.
  if (function_exists('menu_parent_options')) {
    $form['nodehierarchy_menu'] = array(
      '#type' => 'fieldset',
      '#title' => t('Node Hierarchy Menu Generation'),
    );
    $form['nodehierarchy_menu']['nodehierarchy_default_menu_name'] = array(
      '#type' => 'select',
      '#title' => t('Default parent menu'),
      '#options' => menu_get_menus(),
      '#default_value' => variable_get('nodehierarchy_default_menu_name', 'navigation'),
      '#description' => t('If a menu is created for a node with no parent the new menu item will appear in this menu.'),
    );

    $form['nodehierarchy_menu']['nodehierarchy_menu_module_edit'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show hidden Node Hierarchy menu items on the menu overview forms.'),
      '#default_value' => variable_get('nodehierarchy_menu_module_edit', TRUE),
      '#description' => t('Allow disabled nodehierarchy menu items to be edited with regular menu items in the menu overview screen. Turn this off if large Node Hierarchy menus are causing memory errors on menu edit screens.'),
    );
  }


  return system_settings_form($form);
}

/**
 * Implementation of hooks_form_alter().
 *
 * So we don't see preview or delete buttons for hierarchy.
 */
function nodehierarchy_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  switch ($form_id) {
    case 'node_type_form':
      $type = $form['old_type']['#value'];

      $form['nodehierarchy'] = array(
        '#type' => 'fieldset',
        '#title' => t('Node Hierarchy'),
        '#weight' => 10,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );

      $form['nodehierarchy'] += _nodehierarchy_get_node_type_settings_form($type);
    break;
    case @$form['type']['#value'] .'_node_form':
      $node = isset($form['#node']) ? $form['#node'] : NULL;
      $hierarchy_form = module_invoke_all('nodehierarchy_node_form', $node);
      if ($hierarchy_form) {
        $form['nodehierarchy'] = array_merge(
          array(
            '#type'         => 'fieldset',
            '#title'        => t('Node Hierarchy'),
            '#collapsible'  => TRUE,
            '#collapsed'    => TRUE,
          ),
          $hierarchy_form);
      }
      break;
    case 'node_delete_confirm':
      if ($count = _nodehierarchy_get_children_count($form['nid']['#value'])) {
        $form['nodehierarchy_delete_children'] = array(
          '#type'         => 'checkbox',
          '#title'        => t('Delete children'),
          '#description'  => format_plural( $count, 'This node has @count child. Check this box to delete it as well.', 'This node has @count children. Check this box to delete them as well.' )
        );
        array_unshift($form['#submit'], 'nodehierarchy_node_delete_submit');
        $form['actions']['#weight'] = 1;
      }
      break;
  }
}

/**
 * Form for editing an entire menu tree at once.
 *
 * Shows for one menu the menu items accessible to the current user and
 * relevant operations. This is a clone of the menu.module function 
 * menu_overview_form but with nodehierarchy items not loaded if they don not 
 * have a menu presence.
 */
function nodehierarchy_menu_overview_form(&$form_state, $menu) {
  if (!module_exists('menu')) {
    return array();
  }
  // Use the default menu behaviour unless specified.
  if (variable_get('nodehierarchy_menu_module_edit', TRUE)) {
    $form = menu_overview_form(&$form_state, $menu);
  }
  else {
    global $menu_admin;

    // Fetch all the menu items which are not node hierarchy non-displaying items.
    $sql = "
      SELECT m.load_functions, m.to_arg_functions, m.access_callback, m.access_arguments, m.page_callback, m.page_arguments, m.title, m.title_callback, m.title_arguments, m.type, m.description, ml.*
      FROM {menu_links} ml LEFT JOIN {menu_router} m ON m.path = ml.router_path
      WHERE ml.menu_name = '%s'
        AND (ml.module != 'nodehierarchy' OR ml.hidden = 0)
      ORDER BY p1 ASC, p2 ASC, p3 ASC, p4 ASC, p5 ASC, p6 ASC, p7 ASC, p8 ASC, p9 ASC";
    $result = db_query($sql, $menu['menu_name']);
    $tree = menu_tree_data($result);
    $node_links = array();
    menu_tree_collect_node_links($tree, $node_links);
    // We indicate that a menu administrator is running the menu access check.
    $menu_admin = TRUE;
    menu_tree_check_access($tree, $node_links);
    $menu_admin = FALSE;
  
    $form = _menu_overview_tree_form($tree);
    $form['#menu'] =  $menu;
    if (element_children($form)) {
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save configuration'),
      );
    }
    else {
      $form['empty_menu'] = array('#value' => t('There are no menu items yet.'));
    }

    // Count how many elements are omitted.
    $count_sql = "SELECT COUNT(*) FROM {menu_links} ml WHERE ml.menu_name = '%s' AND ml.module = 'nodehierarchy' AND ml.hidden != 0";
    $form['hidden']['#value'] =  db_result(db_query($count_sql, $menu['menu_name']));
    $form['hidden']['#type'] = 'value';
  }

  // Set the form handlers so the behaviour is the same as the regular menu form.
  $form['#submit'][] = 'menu_overview_form_submit';
  $form['#validate'][] = 'menu_overview_form_validate';
  return $form;
}


/**
 * Implementation of hook_form_menu_edit_item_alter().
 *
 * Alter the menu edit screen to limit the available parents according to the rules of node hierachy.
 */
function nodehierarchy_form_menu_edit_item_alter(&$form, &$form_state) {
  // Replace the parent pulldown with the node hierarchy parent selector.
  if ($form['menu']['#item']['module'] == 'nodehierarchy') {
    // Add the js to hide/show the menu selector.
    drupal_add_js(drupal_get_path("module", "nodehierarchy") .'/nodehierarchy.js');
    list(,$nid) = explode('/', $form['menu']['#item']['link_path']);
    $node = node_load($nid);
    // Add a class to the menu fieldset to allow the js to work.
    $form['menu']['#attributes']['class'] .= ' nodehierarchy-menu-link';
    // Replace the parent pulldown.
    $form['menu']['parent'] = _nodehierarchy_get_parent_selector($node->type, @$form['menu']['#item']['plid'], @$form['menu']['#item']['mlid']);
    // Add the menu selector in case the user picks none for the parent.
    $form['menu']['menu_name'] = array(
      '#type' => 'select',
      '#title' => 'Menu',
      '#prefix' => '<div class="nodehierarchy-menu-name">',
      '#suffix' => '</div>',
      '#options' => menu_get_menus(),
      '#default_value' => @$form['menu']['#item']['menu_name'],
      '#description' => t('If you do not pick a parent for this node it\'s menu item will appear at the top level of this menu.'),
    );
    // Set some weights so that the weight pulldown still appears at the bottom.
    $form['menu']['parent']['#weight'] = 10;
    $form['menu']['menu_name']['#weight'] = 20;
    $form['menu']['weight']['#weight'] = 30;

    $form['#submit'] = array_merge(array('nodehierarchy_form_menu_edit_item_submit'), $form['#submit']);
  }
}

/**
 * Submit the menu_edit_item form.
 */
function nodehierarchy_form_menu_edit_item_submit($form, &$form_state) {
  // Menu name and parent are in two different fields after our alter, so we glue them back together.
  $form_state['values']['menu']['parent'] = $form_state['values']['menu']['menu_name'] .':'. $form_state['values']['menu']['parent'];
}

/**
 * Theme the menu overview form into a table.
 *
 * @ingroup themeable
 */
function theme_nodehierarchy_menu_overview_form($form) {
  drupal_add_js(drupal_get_path("module", "nodehierarchy") .'/nodehierarchy.tabledrag.js');
  drupal_add_css(drupal_get_path('module', 'nodehierarchy') .'/nodehierarchy.css');

  // Show a notice if items have been omitted.
  if (!empty($form['hidden']['#value'])) {
    $msg = t('@hidden disabled menu item(s) generated by Node Hierarchy have been ommited from this list.', array('@hidden' => $form['hidden']['#value']));
    if (user_access('administer site configuration')) {
      $msg .= ' '.  t('If you want to show those items, edit your !settings.', array('!settings' => l(t('Node hierarchy settings'), 'admin/settings/nodehierarchy')));
    }
    drupal_set_message($msg, 'warning');
  }

  $js_settings = array();
  $rows = array();
  foreach (element_children($form) as $mlid) {
    if (isset($form[$mlid]['hidden'])) {
      $element = &$form[$mlid];
      if ($element['#item']['module'] == 'nodehierarchy') {
        list(,$nid) = explode('/', $element['#item']['link_path']);
        $node = node_load($nid);
        $js_settings['nodehierarchyMenuDrag']['allowed-parents'][$node->type] = nodeheirarchy_get_allowed_parent_types($node->type);
        // Add special classes to be used for nodehierarchy.js.
        $element['#attributes']['class'] .= ' nodehierarchy-menu-item node-type-'. $node->type;
        $element['#attributes']['id'] = 'mlid-'. $element['#item']['mlid'];
      }
    }
  }
  drupal_add_js($js_settings, 'setting');
  return theme_menu_overview_form($form);
}


/**
 * Implmentation of hook_nodeapi().
 */
function nodehierarchy_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'insert':
      nodehierarchy_insert_node($node);
      break;
    case 'update':
      nodehierarchy_update_node($node);
      break;
    case 'prepare':
      return nodehierarchy_prepare_node($node);
      break;
    case 'load':
      return nodehierarchy_load_node($node);
      break;
    case 'delete':
      nodehierarchy_delete_node($node);
      break;
    case 'view':
      if ($page && !$teaser) {
        nodehierarchy_set_breadcrumbs($node);
      }
      break;
  }
}

/**
 * Get the node edit form for nodehierarchy.
 */
function nodehierarchy_nodehierarchy_node_form($node) {
  $form = array();
  // If this node type can be a child.
  if (nodehierarchy_node_can_be_child($node)) {
    // Save the old value of the node's parent.
    $form['nodehierarchy_old_menu_links'] = array('#type' => 'value', '#value' => $node->nodehierarchy_old_menu_links);

    // if the current user can edit the current node's hierarchy settings (or create new children)
    $can_set_parent =
        user_access('edit all node parents') ||
        ($node->nid == NULL && user_access('create child nodes')) ||
        ($node->uid == $user->uid && user_access('edit own node parents'));

    if ($can_set_parent) {
      drupal_add_js(drupal_get_path("module", "nodehierarchy") .'/nodehierarchy.js');

      $form['nodehierarchy_menu_links'] = array('#tree' => TRUE);
      foreach ((array)@$node->nodehierarchy_menu_links as $key => $menu_link) {
        $item = array('#tree' => TRUE, '#prefix' => '<div class="nodehierarchy-menu-link">', '#suffix' => '</div>');
        $item['plid'] = _nodehierarchy_get_parent_selector($node->type, @$menu_link['plid'], @$menu_link['mlid']);
        $create_menu = variable_get('nh_createmenu_'. $node->type, 'optional_no');
        if (
              (user_access('administer menus') || user_access('customize nodehierarchy menus')) && 
              ($create_menu !== 'never')
          ) {
          if ($create_menu == 'optional_yes' || $create_menu == 'optional_no') {
            $item['enabled'] = array(
              '#type' => 'checkbox',
              '#title' => 'Show in menu',
              '#attributes' => array('class' => 'nodehierarchy-menu-enable'),
              '#default_value' => @$menu_link['enabled'],
              '#description' => t('All of this node\'s ancestors must have this option selected as well for this item to show in the menu.'),
            );
          }

          $item['menu_settings'] = array(
            '#prefix' => '<div class="nodehierarchy-menu-settings">',
            '#suffix' => '</div>', 
            '#tree' => FALSE,
           );
          $item['menu_settings']['menu_name'] = array(
            '#type' => 'select',
            '#title' => 'Menu',
            '#prefix' => '<div class="nodehierarchy-menu-name">',
            '#suffix' => '</div>',
            '#options' => menu_get_menus(),
            '#default_value' => @$menu_link['menu_name'],
            '#description' => t('If you do not pick a parent for this node it\'s menu item will appear at the top level of this menu.'),
            '#parents' => array('nodehierarchy_menu_links', $key, 'menu_name'),
          );
          $item['menu_settings']['customized'] = array(
            '#type' => 'checkbox',
            '#attributes' => array('class' => 'nodehierarchy-menu-customize'),
            '#title' => 'Customize menu title',
            '#default_value' => @$menu_link['customized'],
            '#parents' => array('nodehierarchy_menu_links', $key, 'customized'),
            '#description' => t('Specify a name for this node\'s menu item that is something other than the node\'s title. Leave unchecked to use the node\'s title.'),
          );
          $item['menu_settings']['link_title'] = array(
            '#type' => 'textfield',
            '#prefix' => '<div class="nodehierarchy-menu-title">',
            '#suffix' => '</div>',
            '#title' => t('Menu link title'),
            '#default_value' => @$menu_link['link_title'],
            '#description' => t('The link text corresponding to this item that should appear in the menu.'),
            '#parents' => array('nodehierarchy_menu_links', $key, 'link_title'),
          );
          $item['menu_settings']['expanded'] = array(
            '#type' => 'checkbox',
            '#title' => t('Expand Menu Item'),
            '#default_value' => @$menu_link['expanded'],
            '#description' => t('If selected and this menu item has children, the menu will always appear expanded.'),
            '#parents' => array('nodehierarchy_menu_links', $key, 'expanded'),
          );
          $item['menu_settings']['description'] = array(
            '#type' => 'textarea',
            '#title' => t('Menu Item Description'),
            '#default_value' => isset($menu_link['options']['attributes']['title']) ? $menu_link['options']['attributes']['title'] : '',
            '#rows' => 1,
            '#description' => t('The description displayed when hovering over a menu item. Hold your mouse over <a href="#" title="This is where the description will appear.">this link</a> for a demonstration.'),
            '#parents' => array('nodehierarchy_menu_links', $key, 'description'),
          );
        }
        $form['nodehierarchy_menu_links'][$key] = $item;
      }
    }
  }
  return $form;
}

/**
 * Update a node's parent and create menus etc.
 */
function nodehierarchy_update_node(&$node) {
  if (user_access('edit all node parents') || ($node->uid == $user->uid && user_access('edit own node parents'))) {
    _nodehierarchy_update_insert_node($node);
  }
}

/**
 * Insert a node. Create parents and menus etc.
 */
function nodehierarchy_insert_node(&$node) {
  if (user_access('create child nodes')) {
    _nodehierarchy_update_insert_node($node, TRUE);
  }
}

/**
 * Do the actual insertion or update. No permissions checking is done here.
 */
function _nodehierarchy_update_insert_node(&$node, $insert = FALSE) {
dpm($node);
  // Update all of the pre-existing or default parents.
  for ($i = 0; $i < count(@$node->nodehierarchy_old_menu_links); $i++) {
    // If the node type cannot be a parent, and has no parent itself, then do not save a link.
    if (empty($node->nodehierarchy_menu_links[$i]['enabled']) && !nodehierarchy_node_can_be_parent($node) && !$node->nodehierarchy_menu_links[$i]['plid']) {
      // Delete the old one if it exists.
      if (@$node->nodehierarchy_old_menu_links[$i]['mlid']) {
        nodehierarchy_delete_node_nodehierarchy_menu_link($node->nodehierarchy_old_menu_links[$i]['mlid']);
      }
      // Do not save a new menu_link.
      continue;
    }

    if (isset($node->nodehierarchy_menu_links[$i]['enabled'])) {
      $node->nodehierarchy_menu_links[$i]['hidden'] = (int)!$node->nodehierarchy_menu_links[$i]['enabled'];
    }
    if (!@$node->nodehierarchy_menu_links[$i]['customized']) {
      $node->nodehierarchy_menu_links[$i]['link_title'] = $node->title;
    }
    if (isset($node->nodehierarchy_menu_links[$i]['description'])) {
      $node->nodehierarchy_menu_links[$i]['options']['attributes']['title'] = $node->nodehierarchy_menu_links[$i]['description'];
    }
    $node->nodehierarchy_menu_links[$i]['link_path'] = 'node/' . $node->nid;
    _nodehierarchy_save_menu_link($node->nodehierarchy_old_menu_links[$i], $node->nodehierarchy_menu_links[$i], $insert);
  }
}

/**
 * Load a node's menu links when the node is loaded.
 */
function nodehierarchy_load_node($node) {
  $parents = _nodehierarchy_get_node_menu_links($node->nid);
  return array(
    'nodehierarchy_menu_links' => $parents,
  );
}

/**
 * Set a default parent menu link the node is loaded.
 */
function nodehierarchy_prepare_node(&$node) {
  module_invoke_all('nodehierarchy_default_parents', $node);
  $node->nodehierarchy_old_menu_links = $node->nodehierarchy_menu_links;
}

/**
 * Set the default parents for a node.
 */
function nodehierarchy_nodehierarchy_default_parents(&$node) {
  $plid = NULL;

  if (nodehierarchy_node_can_be_child($node) || nodehierarchy_node_can_be_parent($node)) {
    if (!isset($node->nodehierarchy_menu_links) || empty($node->nodehierarchy_menu_links)) {
      // Set the type default if there is one.
      $plid = variable_get('nh_defaultparent_'. $node->type, 0);

      // Get the parent from the get string. User must have update perms for parent.
      if (isset($_GET['parent']) && (int)$_GET['parent']) {
        $parent_node = node_load((int)$_GET['parent']);
        if ($parent_node && nodehierarchy_node_can_be_parent($parent_node) && node_access("update", $parent_node)) {
          $plid = _nodehierarchy_get_node_mlid($parent_node->nid);
        }
      }

      // Create a default menu_link object.
      $menu_link = _nodehierarchy_default_menu_link(@$node->nid, $plid);
      $create_menu = variable_get('nh_createmenu_'. $node->type, 'optional_no');
      $menu_link['hidden'] = ($create_menu == 'optional_no' || $create_menu == 'never');
      $menu_link['enabled'] = !$menu_link['hidden'];
      $node->nodehierarchy_menu_links[] = $menu_link;
    }
  }
}

/**
 * Delete the nodehierarchy information when a node is deleted.
 */
function nodehierarchy_delete_node($node) {
  $links = _nodehierarchy_get_node_mlids($node->nid);
  foreach ($links as $mlid) {
    menu_link_delete($mlid);
  }
  nodehierarchy_delete_node_nodehierarchy_menu_links($node->nid);
}

/**
 * Submit function for the node delete confirm form.
 */
function nodehierarchy_node_delete_submit($form, $form_state) {
  $form_values = $form_state['values'];
  if ($form_values['confirm'] && $form_values['nodehierarchy_delete_children']) {
  }
}

/**
 * Get the nodehierarchy setting form for a particular node type.
 */
function _nodehierarchy_get_node_type_settings_form($key, $append_key = FALSE) {
  $form              = array();
  $form['nh_allowchild'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Allowed child node types'),
    '#options' => node_get_types('names'),
    '#default_value' => nodeheirarchy_get_allowed_child_types($key),
    '#description' => t('Node types which can be created as child nodes of this node type.'),
  );
  $form['nh_defaultparent'] = _nodehierarchy_get_parent_selector($key, variable_get('nh_defaultparent_'. $key, 0));
  $form['nh_defaultparent']['#title'] = t('Default Parent');
  $form['nh_createmenu'] = array(
    '#type' => 'radios',
    '#title' => t('Show item in menu'),
    '#default_value' => variable_get('nh_createmenu_'. $key, 'optional_no'),
    '#options' => array(
      'never' => t('Never'),
      'optional_no' => t('Optional - default to no'),
      'optional_yes' => t('Optional - default to yes'),
      'always' => t('Always'),
    ),
    '#description' => t("Users must have the 'administer menu' or 'customize nodehierarchy menus' permission to override default options."),
  );

  $form += module_invoke_all('nodehierarchy_node_type_settings_form', $key);

  $form['#submit'] = array('_nodehierarchy_node_type_settings_submit');

  // If we need to append the node type key to the form elements, we do so.
  if ($append_key) {
    // Appending the key does not work recursively, so fieldsets etc. are not supported.
    foreach ($form as $form_key => $val) {
      unset($form[$form_key]);
      $form[$form_key .'_'. $key] = $val;
    }
  }
  return $form;
}

/**
 * Can a node be a child.
 */
function nodehierarchy_node_can_be_child($node) {
  $type = is_object($node) ? $node->type : $node;
  return count(nodeheirarchy_get_allowed_parent_types($type));
}

/**
 * Can a node be a parent.
 */
function nodehierarchy_node_can_be_parent($node) {
  $type = is_object($node) ? $node->type : $node;
  return count(nodeheirarchy_get_allowed_child_types($type));
}

/**
 * Determine if a given node can be a child of another given node.
 *
 * @param $parent
 *    The potentential parent node (can be null for any node).
 * @param $child
 *    The potential child node (can be null for any node).
 * @return
 *   Boolean. Whether second node can be a child of the first.
 */
function nodehierarchy_node_can_be_child_of($parent = NULL, $child = NULL) {
  return in_array($child->type, nodeheirarchy_get_allowed_child_types($parent->type));
}

/**
 * Get the allwed parent types for the given child type.
 */
function nodeheirarchy_get_allowed_parent_types($child_type = NULL) {
  $parent_types = array();
  foreach (node_get_types() as $type => $info) {
    $allowed_children = array_filter(variable_get('nh_allowchild_'. $type, array()));
    if ((empty($child_type) && !empty($allowed_children)) || (in_array($child_type, (array)$allowed_children, TRUE))) {
      $parent_types[] = $type;
    }
  }
  return array_unique($parent_types);
}

/**
 * Get the allwed parent types for the given child type.
 */
function nodeheirarchy_get_allowed_child_types($parent_type) {
  $child_types = array_filter(variable_get('nh_allowchild_'. $parent_type, array()));
  return array_unique($child_types);
}

/**
 * Display the children tab.
 */
function nodehierarchy_view_children($node) {
  drupal_set_title(t('Children of %t', array('%t' => $node->title)));
  nodehierarchy_set_breadcrumbs($node, TRUE);
  $out = drupal_get_form('nodehierarchy_children_form', $node);
  $out .= theme('nodehierarchy_new_child_links', $node);
  return $out;
}

/**
 * Built the children tab form.
 */
function nodehierarchy_children_form(&$form_state, $node) {
  $form = array();
  $children_links = _nodehierarchy_get_children_menu_links($node->nid, FALSE);
  $form['children'] = array('#tree' => TRUE);
  $type_names = node_get_types('names');
  foreach ($children_links as $child_link) {
    list(,$nid) = explode('/', $child_link['link_path']);
    if ($child = node_load($nid)) {
      $child_item = array();
      $child_item['menu_link']  = array('#type' => 'value', '#value' => $child_link);
      $child_item['node']       = array('#type' => 'value', '#value' => $child);
      $child_item['title']      = array('#value' => l($child->title, $child_link['link_path']));
      $child_item['type']       = array('#value' => $type_names[$child->type]);
      $child_item['weight']     = array(
        '#type' => 'weight',
        '#delta' => 50,
        '#default_value' => isset($form_state[$child_link['mlid']]['weight']) ? $form_state[$child_link['mlid']]['weight'] : $child_link['weight'],
      );

      $form['children'][$child_link['mlid']] = $child_item;
    }
  }
  if (element_children($form['children'])) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save child order'),
    );
  }
  else {
    $form['no_children'] = array('#value' => t('This node has no children.'));
  }
  return $form;
}

/**
 * Submit the children tab form.
 */
function nodehierarchy_children_form_submit($form, &$form_state) {
  $updated_items = array();
  foreach (element_children($form['children']) as $mlid) {
    if (isset($form['children'][$mlid]['menu_link'])) {
      $element = $form['children'][$mlid];
      if ($element['weight']['#value'] != $element['weight']['#default_value']) {
        $element['menu_link']['#value']['weight'] = $element['weight']['#value'];
        $updated_items[$mlid] = $element['menu_link']['#value'];
      }
    }
  }

  // Save all our changed items to the database.
  foreach ($updated_items as $item) {
    menu_link_save($item);
  }
}



/**
 * Display the children tab form.
 */
function theme_nodehierarchy_children_form(&$form) {
  drupal_add_tabledrag('children-list', 'order', 'sibling', 'menu-weight');

  $header = array(
    t('Title'),
    t('Type'),
    t('Weight'),
    array('data' => t('Operations'), 'colspan' => '3'),
  );

  $rows = array();
  foreach (element_children($form['children']) as $mlid) {
    $element = &$form['children'][$mlid];

    // Add special classes to be used for tabledrag.js.
    $element['weight']['#attributes']['class'] = 'menu-weight';

    $node = $element['node']['#value'];
    $row = array();
    $row[] = drupal_render($element['title']);
    $row[] = drupal_render($element['type']);
    $row[] = drupal_render($element['weight']);
    $row[] = node_access('update', $node) ? l(t('edit'), 'node/' . $node->nid . '/edit') : '';
    $row[] = node_access('delete', $node) ? l(t('delete'), 'node/' . $node->nid . '/edit') : '';
    $row[] = nodehierarchy_children_tab_access($node) ? l(t('children'), 'node/' . $node->nid . '/children') : '';

    $row = array('data' => $row);
    $row['class'] = !empty($row['class']) ? $row['class'] .' draggable' : 'draggable';
    $rows[] = $row;
  }
  $output = '';
  if ($rows) {
    $output .= theme('table', $header, $rows, array('id' => 'children-list'));
  }
  $output .= drupal_render($form);
  return $output;
}

/**
 * Get the children of the given node.
 */
function _nodehierarchy_get_children_menu_links($parent, $pager = FALSE) {
  $children = array();
  $plid = _nodehierarchy_get_node_mlid($parent);
  if ($pager) {
    $result = pager_query("SELECT * FROM {menu_links} WHERE module = 'nodehierarchy' AND plid = %d ORDER BY weight ASC", $pager, 0, NULL, $plid);
  }
  else {
    $result = db_query("SELECT * FROM {menu_links} WHERE module = 'nodehierarchy' AND plid = %d ORDER BY weight ASC", $plid);  
  }
  while ($item = db_fetch_array($result)) {
    $children[] = _nodehierarchy_prepare_menu_link($item);
  }
  return $children;
}

/**
 * Count the children of the given node.
 */
function _nodehierarchy_get_children_count($parent) {
  if ($plid = _nodehierarchy_get_node_mlid($parent)) {
    $out = db_fetch_array(db_query("SELECT count(mlid) as children_count FROM {menu_links} WHERE module = 'nodehierarchy' AND plid = %d AND router_path = 'node/%'", $plid));
    return @$out['children_count'];
  }
  return 0;
}

/**
 * Save a menu link with changes if needed.
 */
function _nodehierarchy_save_menu_link(&$menu_link, $new_settings = array(), $insert = FALSE) {
  // Item is being moved to a new parent.
  if ($insert || (isset($new_settings['plid']) && $new_settings['plid'] !== $menu_link['plid'])) {
    // Get the next weight for the new parent.
    $new_settings['weight'] = _nodehierarchy_get_menu_link_next_child_weight($menu_link['plid']);
  }

  // Get the parent menu item.
  $menu_link = $new_settings + $menu_link;
  $menu_link['module'] = 'nodehierarchy';

  // Save the parent
  menu_link_save($menu_link);
  // Create the link reference.
  nodehierarchy_create_nodehierarchy_menu_link($menu_link);
}

/**
 * Create a link from the node to it's menu item.
 *
 * This pivot table can be used for more efficiently joining to the menu links table for views integration.
 */
function nodehierarchy_create_nodehierarchy_menu_link($menu_link) {
  list(,$nid) = explode('/', $menu_link['link_path']);
  if (!db_fetch_array(db_query("SELECT mlid FROM {nodehierarchy_menu_links} WHERE mlid = %d", $menu_link['mlid']))) {
    db_query("INSERT INTO {nodehierarchy_menu_links} (mlid, nid) VALUES (%d, %d)", $menu_link['mlid'], $nid);
  }
}

/**
 * Delete all link from the node to it's menu items.
 */
function nodehierarchy_delete_node_nodehierarchy_menu_links($nid) {
  db_query("DELETE FROM {nodehierarchy_menu_links} WHERE nid = %d", $nid);
}

/**
 * Delete a single menu_link from a node.
 */
function nodehierarchy_delete_node_nodehierarchy_menu_link($mlid) {
  menu_link_delete($mlid);
  db_query("DELETE FROM {nodehierarchy_menu_links} WHERE mlid = %d", $mlid);
}


/**
 * Get the menu link for the given node.
 */
function _nodehierarchy_get_node_mlid($nid) {
  $out = db_fetch_array(db_query("SELECT mlid FROM {menu_links} WHERE module = 'nodehierarchy' AND link_path = 'node/%d' LIMIT 1", $nid));
  return @$out['mlid'];
}

/**
 * Get the menu link id for the given node.
 */
function _nodehierarchy_get_node_mlids($nid) {
  $out = array();
  $result = db_query("SELECT mlid FROM {menu_links} WHERE module = 'nodehierarchy' AND link_path = 'node/%d'", $nid);
  while ($link = db_fetch_array($result)) {
    $out[] = $link['mlid'];
  }
  return $out;
}

/**
 * Get the menu link for the given node.
 */
function _nodehierarchy_get_node_menu_links($nid) {
  $result = db_query("SELECT * FROM {menu_links} WHERE module = 'nodehierarchy' AND link_path = 'node/%d'", $nid);
  $out = array();
  while ($item = db_fetch_array($result)) {
    $out[] = _nodehierarchy_prepare_menu_link($item);
  }
  return $out;
}

/**
 * Get the menu links of each of a node's ancestors.
 */
function _nodehierarchy_get_node_ancestor_menu_links($nid) {
  $menu_links = _nodehierarchy_get_node_menu_links($nid);
  $out = array();
  foreach ($menu_links as $menu_link) {
    $out[$menu_link['mlid']] = array();
    for ($i = 1; $i < MENU_MAX_DEPTH; $i++) {
      if ($plid = @$menu_link['p'.$i]) {
        $out[$menu_link['mlid']][] = _nodehierarchy_load_menu_link($plid);
      }
    }
  }
  return $out;
}

/**
 * Get the parent nodes for the given node.
 */
function nodehierarchy_get_node_parent_nids($nid) {
  $out = array();
  $menu_links = _nodehierarchy_get_node_menu_links($nid);
  foreach ($menu_links as $menu_link) {
    $parent_link = _nodehierarchy_load_menu_link($menu_link['plid']);
    $out[] = $parent_link['nid'];
  }
  return $out;
}

/**
 * Get the parent nodes for the given node.
 */
function nodehierarchy_get_node_parents($nid) {
  $out = array();
  $menu_links = _nodehierarchy_get_node_menu_links($nid);
  foreach ($menu_links as $menu_link) {
    $parent_link = _nodehierarchy_load_menu_link($menu_link['plid']);
    $out[] = node_load($parent_link['nid']);
  }
  return $out;
}

/**
 * Get the primary parent node for the given node.
 */
function nodehierarchy_get_node_parent($nid) {
  $out = array();
  $menu_links = _nodehierarchy_get_node_menu_links($nid);
  foreach ($menu_links as $menu_link) {
    $parent_link = _nodehierarchy_load_menu_link($menu_link['plid']);
    return node_load($parent_link['nid']);
  }
  return NULL;
}

/**
 * Get the ancestor nodes for the given node.
 */
function nodehierarchy_get_node_ancestor_nids($nid) {
  $out = array();
  $menu_links = _nodehierarchy_get_node_ancestor_menu_links($nid);
  foreach ($menu_links as $trail) {
    foreach ($trail as $menu_link) {
      $out[] = $menu_link['nid'];
    }
  }
  return $out;
}

/**
 * Helper function to load a menu_link given a mlid.
 */
function _nodehierarchy_load_menu_link($mlid) {
  $item = db_fetch_array(db_query("SELECT * FROM {menu_links} WHERE module = 'nodehierarchy' AND mlid = %d", $mlid));
  return _nodehierarchy_prepare_menu_link($item);
}

/**
 * Helper function to prepare a menu link after it's been loaded.
 */
function _nodehierarchy_prepare_menu_link($menu_link) {
  if ($menu_link) {
    $menu_link['options'] = is_string($menu_link['options']) ? unserialize($menu_link['options']) : $menu_link['options'];
    $menu_link['enabled'] = !$menu_link['hidden'];
    list(,$menu_link['nid']) = explode('/', $menu_link['link_path']);
  }
  return $menu_link;
}

/**
 * Get the next child weight for a given plid.
 */
function _nodehierarchy_get_menu_link_next_child_weight($plid) {
  $out = db_result(db_query("SELECT MAX(weight) FROM {menu_links} WHERE module = 'nodehierarchy' AND plid = %d", $plid));
  if ($out !== NULL) {
    return $out + 1;
  }
  return 0;
}

/**
 * Get the default menu link values for a new nodehierarchy menu link.
 */
function _nodehierarchy_default_menu_link($nid = 0, $plid = 0) {
  return array(
    'module'      => 'nodehierarchy',
    'menu_name'   => variable_get('nodehierarchy_default_menu_name', 'navigation'),
    'router_path' => 'node/%',
    'link_path'   => $nid ? 'node/'. $nid : '',
    'hidden'      => 1,
    'plid'        => $plid,
    'weight'      => 0,
  );
}

/**
 * Set the breadcrumbs and active menu to reflect the position of the given
 * node in the site hierarchy.
 *
 * @param $node
 *   The current node
 * @param $add_node
 *   Whether we want the current node in the breadcrumb (eg: for the children tab)
 */
function nodehierarchy_set_breadcrumbs($node, $add_node = FALSE) {
  // Place the given node.
  $breadcrumb = array();

  // Get all the possible breadcrumbs for the node.
  $breadcrumbs = nodehierarchy_get_breadcrumbs($node->nid);

  // There may be multiple breadcrumbs, but we only want one, so pick the first one.
  $breadcrumb = (array)@$breadcrumbs[0];

  // Remove the node itself if it's not needed (we would want it for the children tab for example).
  if (!$add_node) {
    array_pop($breadcrumb);
  }

  // Stick the home link on the top of the breadcrumb.
  array_unshift($breadcrumb, l(t('Home'), '<front>'));

  drupal_set_breadcrumb($breadcrumb);
}

/**
 * Get the breadcrumbs for the given node.
 *
 * There could be multiple breadcrumbs because there could be multiple parents.
 */
function nodehierarchy_get_breadcrumbs($nid) {
  $breadcrumbs = array();

  // Retrieve the descendent list of menu links and convert them to a breadcrumb trail.
  $menu_link_trails = _nodehierarchy_get_node_ancestor_menu_links($nid);
  foreach ($menu_link_trails as $menu_links) {
    $breadcrumb = array();
    foreach ($menu_links as $menu_link) {
      $breadcrumb[] = l($menu_link['link_title'], $menu_link['link_path']);
    }
    $breadcrumbs[] = $breadcrumb;
  }
  return $breadcrumbs;
}

/**
 * Get the parent selector pulldown.
 */
function _nodehierarchy_get_parent_selector($child_type, $plid, $exclude = NULL) {
  // $child_type is currently unused.
  $options = array(0 => '-- '. t('NONE') .' --');
  $items = _nodehierarchy_parent_options($child_type, $exclude);
  foreach ($items as $key => $item) {
    $options[$key] = _nodehierarchy_parent_option_title($item);
  }
  $out = array(
    '#type' => 'select',
    '#title' => t('Parent'),
    '#default_value' => $plid,
    '#attributes' => array('class' => 'nodehierarchy-parent-selector'),
    '#options' => $options,
    '#items' => $items,
    '#theme' => 'nodehierarchy_parent_selector',
    '#element_validate' => array('nodehierarchy_parent_selector_validate'),
  );
  return $out;
}

/**
 * Theme the parent selector pulldown, allowing for disabled options.
 */
function theme_nodehierarchy_parent_selector($element) {
  $select = '';
  _form_set_class($element, array('form-select'));

  // Assemble the options.
  $options = '';
  foreach ($element['#options'] as $key => $option) {
    $attributes = '';
    // If the option represents a parent item (and not just the none option).
    if ($item = @$element['#items'][$key]) {
      if (@$element['#value'] == $key) {
        $attributes .= ' selected="selected"';
      }
      if (@$item['disabled']) {
        $attributes .= ' disabled="disabled"';
        $option .= '*';
        $element['#description'] = t('Nodes marked with a * cannot be a parent for this node because they are not an allowed parent type.');
        if (user_access('administer hierarchy')) {
          $element['#description'] .= t(' To allow these nodes to be parents of this node, change the setting for that node type in the !settings', array('!settings' => l(t('Node Hierarchy settings'), 'admin/settings/nodehierarchy')));
        }
      }
    }
    $options .= '<option value="'. check_plain($key) .'"'. $attributes .'>'. $option .'</option>';
  }
  return theme('form_element', $element, '<select name="'. $element['#name'] .'"' . drupal_attributes($element['#attributes']) .' id="'. $element['#id'] .'">'. $options .'</select>');
}

function nodehierarchy_parent_selector_validate($element, &$form_state) {
  $selection = @$element['#items'][$element['#value']];
  if (is_array($selection) && !empty($selection['disabled'])) {
    form_error($element, t('You have selected a parent node which cannot be a parent of this node type.'));
  }
}

/**
 * Return a list of menu items that are valid possible parents for the given node.
 */
function _nodehierarchy_parent_options($child_type, $exclude = NULL) {
  // Get all the possible parents.
  $all_types = nodeheirarchy_get_allowed_parent_types();
  $parent_types = nodeheirarchy_get_allowed_parent_types($child_type);
  $type_names = array();
  foreach ($all_types as $type) {
    $type_names[$type] = "'$type'";
  }

  $items = array();
  if ($type_names) {
    $result = db_query(
                      "SELECT plid, menu_links.mlid, link_title, depth, weight, parent_node.type as type 
                         FROM {menu_links}
                    LEFT JOIN {nodehierarchy_menu_links} nh_parent 
                           ON {menu_links}.mlid = nh_parent.mlid
                    LEFT JOIN {node} parent_node
                           ON nh_parent.nid = parent_node.nid
                        WHERE module = 'nodehierarchy' 
                          AND router_path = 'node/%'
                          AND parent_node.type IN (". implode(', ', $type_names) .")
                     ORDER BY depth DESC, weight ASC"
                    );
    while ($item = db_fetch_array($result)) {
      $items[$item['mlid']] = $item;
    }
  }

  // Arrange into a tree.
  foreach (array_keys($items) as $key) {
    if (!in_array($items[$key]['type'], $parent_types)) {
      $items[$key]['disabled'] = TRUE;
    }
    if ($items[$key]['plid']) {
      $items[$items[$key]['plid']]['children'][] = $items[$key];
      unset($items[$key]);
    }
  }
  // Flatten tree to a list of options.
  return _nodehierarchy_parent_options_tree($items, $exclude);
}

/**
 * Recursive helper function for menu_parent_options().
 */
function _nodehierarchy_parent_options_tree($items, $exclude = NULL, $depth = 1) {
  $out = array();
  foreach ((array)$items as $item) {
    if (@$item['depth'] == $depth && $item['mlid'] !== $exclude) {
      $children = _nodehierarchy_parent_options_tree(@$item['children'], $exclude, $depth + 1);
      // Only show the item if it is enabled (ie: can be a parent) or has descendants which are.
      if ($children || empty($item['disabled'])) {
        $out[(string)$item['mlid']] = $item;
        $out += (array)$children;
      }
    }
  }
  return $out;
}

/**
 * Get the title of the given item to display in a pulldown.
 */
function _nodehierarchy_parent_option_title($item) {
  return str_repeat('--', $item['depth']) .' '. truncate_utf8($item['link_title'], 30, TRUE, FALSE);
}

/**
 * Display links to create new children nodes of the given node
 */
function theme_nodehierarchy_new_child_links($node) {
  $out = "";
  $create_links = array();

  if (user_access('create child nodes') && node_access('update', $node)) {
    foreach (nodeheirarchy_get_allowed_child_types($node->type) as $key) {
      if (node_access('create', $key)) {
        $type_name = node_get_types('name', $key);
        $destination = drupal_get_destination() ."&parent=$node->nid";
        $key = str_replace('_', '-', $key);
        $title = t('Add a new %s.', array('%s' => $type_name));
        $create_links[] = l($type_name, "node/add/$key", array('query' => $destination, 'attributes' => array('title' => $title)));
      }
    }
    if ($create_links) {
      $out = '<div class="newchild">'. t("Create new child !s", array('!s' => implode(" | ", $create_links))) .'</div>';
    }
  }
  return $out;
}