<?php
class MymoduleTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'mymodule',
      'description' => 'Ensure that the mymodule content type provided functions properly.',
      'group' => 'Mymodule Demonstration Tests',
    );
  }

  public function setUp() {
    parent::setUp('mymodule');  // Enable any modules required for the test
    // Create and log in our user
    $privileged_user = $this->drupalCreateUser(array('create mymodule', 'edit own mymodule'));
    $this->drupalLogin($privileged_user);
  }

  // Create a mymodule node using the node form
  public function testMymoduleCreate() {
    $edit = array(
      'title' => $this->randomName(32),
      'body' => $this->randomName(64),
    );
    $this->drupalPost('node/add/mymodule', $edit, t('Save'));
    $this->assertText(t('mymodule page @title has been created.', array('@title' => $edit['title'])));

    // For debugging we can output the page so it can be opened with a browser
    // Remove this line when the test has been debugged
    $this->outputScreenContents('After page creation', 'testMymoduleCreate');
  }

  // Create a mymodule node and then see if our user can edit it
  public function testMymoduleEdit() {
    $settings = array(
      'type' => 'mymodule',
      'title' => $this->randomName(32),
      'body' => $this->randomName(64),
    );
    $node = $this->drupalCreateNode($settings);

    // For debugging, we might output the node structure with $this->pass()
    // $this->pass('Node created: ' . var_export($node,TRUE));

    $edit_path = "node/{$node->nid}/edit";
    $this->drupalGet($edit_path);
    $this->assertFieldById('edit-body','', 'Looking for edit-body field as indication that we got to the edit page');

    // For debugging we can output the page so it can be opened with a browser
    // Remove this line when the test has been debugged
    $this->outputScreenContents("After drupalGet($edit_path) in testMymoduleEdit", 'testMymoduleEdit');
  }

  // A utility function we can use in debugging our test. This outputs the screen
  // as an HTML file we can view, and uses the pass() method to report it to us
  // in the simpletest web interface
  private function outputScreenContents($description, $basename) {
    // This is a hack to get a directory that won't be cleaned up by simpletest
    $file_dir = file_directory_path().'/../simpletest_output_pages';
    if (!is_dir($file_dir)) {
      mkdir($file_dir, 0777, TRUE);
    }
    $output_path = "$file_dir/$basename." . $this->randomName(10) . '.html';
    $rv = file_put_contents($output_path, $this->drupalGetContent());
    $this->pass("$description: Contents of result page are ".l('here',$output_path));
  }
}